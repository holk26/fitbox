generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(uuid())
  email            String       @unique
  password         String?
  name             String?
  role             String       @default("MEMBER")
  googleId         String?      @unique
  appleId          String?      @unique
  profile          Profile?
  skills           Skill[]
  attendances      Attendance[]
  memberships      Membership[]
  classes          Class[]      @relation("InstructorOfClass")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Profile {
  id        String     @id @default(uuid())
  userId    String @unique
  user      User       @relation(fields: [userId], references: [id])
  bio       String?
  phone     String?
  photoUrl  String?  
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Class {
  id            String     @id @default(uuid())
  title         String
  description   String?
  startTime     DateTime
  endTime       DateTime
  instructorId  String
  instructor    User       @relation(fields: [instructorId], references: [id], name: "InstructorOfClass")
  attendees     Attendance[]
  maxAttendees  Int
  qrCode        String     @unique
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Attendance {
  id         String    @id @default(uuid())
  userId     String
  classId    String
  user       User      @relation(fields: [userId], references: [id])
  class      Class     @relation(fields: [classId], references: [id])
  attendedAt DateTime
  viaQR      Boolean   @default(false)
}

model Membership {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Skill {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  name      String
  value     String  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Subscription {
  id           String    @id @default(uuid())
  gymId        String
  gymName      String
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
